/**
 * Created by ft on 2017/1/12.
 * JS笔试题：快速排序
 * 插入排序的算法描述是一种简单直观的排序算法。它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，
 * 找到相应位置并插入。插入排序在实现上，通常采用in-place排序（即只需用到O(1)的额外空间的排序），因而在从后向前扫描过程中，
 * 需要反复把已排序元素逐步向后挪位，为最新元素提供插入空间。
 * 最佳情况：输入数组按升序排列：O(n);
 * 最坏情况：输入数组按降序排列：O(n^2)
 * 平均情况：O(n^2)
 * 需额外空间：O(1)
 */

function insertSort(arr) {
    if(arr.length<=1) return arr;//数组长度小于等于1直接返回
    //取出下标1的元素开始插入（因为下标0的元素可以认为已经被排序），依次循坏插入下标为arr.length-1的元素
    for(var i=1;i<arr.length;i++){
        var j=i-1;
        var temp=arr[i];//把要插入的元素作为临时变量保存
        while(j>=0&&arr[j]>temp){//把要插入的元素从后往前扫描依次与已经排好序的数组元素作大小比较
            arr[j+1]=arr[j];//若前面排好序的元素大于要插入的元素，则将该元素往后移一位
            j--;//j--,待插入的数不断往前与已排好序的元素做比较
        }
        arr[j+1]=temp;//一旦找到已排好序的元素小于或等于待插元素，则将待插元素插在j+1的位置
    }
    return arr;
}
var arr=[85,24,63,45,17,31,96,50];
console.log(insertSort(arr));\\[ 17, 24, 31, 45, 50, 63, 85, 96 ]
